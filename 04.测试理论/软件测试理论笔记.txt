==============================第一天==============================
软件的研发模型
	
1.瀑布模型：
	计划----->需求分析----->设计----->编码----->测试----->运行、维护
	
	特点：
		·线性化模型结构
		·各阶段具有里程碑特征
		·基于文档的驱动
		·严格的阶段评审机制
		
	优点：
		·有利于大型软件研发过程中人员的组织和管理
		·有利于开发方法和工具的使用
		·提高了软件的质量和效率
		
	缺点：
		·不灵活
		
2.V模型
	用户需求----->需求分析----->概要设计----->详细设计----->编码----->单元测试----->集成测试----->系统测试----->验收测试
	
	优点：
		·软件测试分成若干级别，能够提高软件质量
		·软件测试和开发级别一一对应
		
	缺点：
		·忽略了软件测试对象不止是程序，还包括文档
		·软件测试是最后阶段，需求阶段的问题，只能到验收测试阶段才能发现
	
3.W模型，又称双V模型
	
	优点：
		·测试活动和开发活动是同步进行
		·软件测试的对象不仅仅是程序，还包括文档
		·尽早的投入测试可以降低开发成本
		
	缺点：
		·无法迭代，测试活动和开发活动保持着一种线性的前后关系，上一阶段结束后才能正式开始下一阶段的工作
		
	双V指的是验证和确认：
		验证：指是否正确的做事情，属于QA的职责
		确认：指做的事情是正确的，属于软件测试工程师的职责
		
		验证：指检查实现的功能与需求规格是否一致
		确认：指检查软件实现的功能与用户的需求是否一致
	
	
6.快速原型（迭代）
	·又称原型定义，非线性模型，主要用于小公司，客户到最后才知道软件的最终模样，先做成一个demo，给客户看一个样板
	
7.敏捷开发
	·把需求拆分为单个流程story
	·没有固定的研发模型
	·强调集体办公
	·用沟通来代替文档
	·让客户参与项目
	·拥抱客户的需求变更
	
8.软件的生命周期
	·需求--->设计--->编码--->测试--->维护--->升级--->废弃
	·测试的设计文档：测试方案和测试用例
	·开发的设计文档：概要设计和详细设计
	·软件测试贯穿于软件的生命周期
	
9.软件测试流程
	需求分析--->测试计划--->测试方案--->测试用例--->测试执行--->测试报告
	
10.项目中的成员
	项目经理(PM)
	架构师
	程序员(程序猿、码农)
	软件测试工程师：初级、中级、高级；测试经理、交付经理、部门经理、部门总监
	资料工程师
	配置管理员CMO
	QA
	产品经理BA
	UI设计
	DBA：数据库管理员
	
	
软件测试基础

1.软件测试的经典定义：在规定的条件下，操作程序，发现缺陷，评估质量

2.软件测试的目的：尽可能多的发现软件的错误，预防缺陷，对软件质量进行度量和评估，以提高软件的质量

3.软件测试的范围：程序、数据、文档

4.软件测试的起源来自于软件工程

5.质量的定义：软件与明确和隐含定义的需求相一致的程度

6.软件测试的原则：
	·所有软件测试都应该追溯到用户需求，需求是软件测试的依据
	·应当把尽早的和不断的测试作为软件测试的座右铭
		尽早测试能够提前发现缺陷、降低修复成本
		不断测试指测试的分级，通过多级测试更能提高软件的质量
	·完全测试是不可能的，软件测试需要终止，出于成本考虑、现实考虑
	·软件测试无法显示软件的潜在缺陷，缺陷是发现不完的
	·充分注意测试中的群集现象：二八定律，80%的缺陷出现在软件的20%的模块，发现缺陷越多的模块、遗留的缺陷也越多
	·程序员应避免检查自己的程序，测试的心理学
	·尽量避免测试的随意性、软件测试需要有计划、有规划

7.软件测试的风险
	进度风险、质量风险、人员风险、成本风险、变更风险
	
8.软件测试工程师所具备的素质
	综合素质
		·细心、耐心、责任心、自信心
		·沟通能力、语言及文字表达能力
		·团队的协作能力
		·逻辑思维能力和发散性思维能力
		·发现问题的敏锐度、观察能力和洞察力
		·具有丰富的软件测试经验
		
	专业素质：
		·熟悉软件研发流程及测试流程的知识
		·熟悉测试理论知识、测试技术和方法、测试文档的编写
		·掌握测试工具如：管理工具、自动化、性能、安全、兼容性工具
		·计算机相关知识、数据库、开发语言、操作系统、网络基础
		
9.软件测试工程师的职责
	·搭建测试环境
	·编写软件测试用例
	·执行软件测试
	·报告软件缺陷
	·更新软件缺陷报告
	·验证修正的缺陷(即回归测试)
	·报告测试的状态
	
软件测试的分类

1.按照阶段划分：单元测试、集成测试、确认测试、系统测试、验收测试

	单元测试：
		·对软件中的最小可测单元进行测试，如：C语言中的函数、Java中的类、UI界面中窗口
		·侧重检查程序的内部结构、逻辑控制及异常处理
		·单元测试能发现软件80%的缺陷
		·单元测试90%是由开发人员测试，10%由测试人员测试
		·单元测试工具，如：Java语言的Junit，Python语言中的Pytest和unittest
		·单元测试的依据是详细设计
	
	集成测试：
		·又称为组装测试或者联合测试
		·在单元测试的基础上，将所有的模块按照设计要求进行组装成系统或者子系统
		·侧重检查模块和模块之间的接口及接口数据传递的正确性，以及对组装后的整体功能进行测试
		·依据是概要设计
		
		分类：
			非增量式集成，又称一次性集成，首先对每个模块分别进行测试，然后将所有模块集成在一起
			进行测试，最终得到要求的软件系统
			
			优点：集成速度快、时间段、所需人力资源少
			缺点：一次性集成的成功率低、发现缺陷后很难定位和修复
			
			增量式集成
				自顶向下增量式集成，需要编写桩程序
				自底向上增量式集成，需要编写驱动程序
				
	确认测试：
		·目的是向未来的用户表明系统能够像预定要求那样工作
		·经集成测试后，根据需求设计及系统运行环境的要求等相应的配置、检查软件的有效性、验证软件的功能
		  及性能是否与用户所期待的一样
			
	系统测试：
		将已经集成并确认好的软件与计算机硬件、网络、软件结合成一个整体进行的测试
		
		参考依据：需求规格说明书
		
		系统测试范围：
			功能测试：根据需求规格检查软件明确与隐含需求的符合度，即检查明确需求是否正确实现或是否有遗漏，检查
			          隐含需求是否正确实现，检查是否得到正确的输入和输出
					  
			性能测试：使用自动化测试工具模拟正常峰值和异常负载情况下的系统各项性能指标
			
			压力测试：逐步给服务器施加压力、直到服务器的某个参数失效，测试极限	
			
			容量测试：测试系统最多能支持的用户数	
			
			安全性测试：验证应用程序的安全服务			
			
			可用性测试：让一群具有代表性的用户对产品进行典型操作	
			
			GUI测试：又称界面测试			
			
			安装测试：确保软件在正常情况和异常情况下的不同条件下，进行安装、升级、最后都能够成功安装	
			
			配置测试：通过对被系统软硬件环境的调整，从而找到系统各项资源的最优分配原则			
			
			异常测试：测试系统是否不执行它不应该完成的操作			
			
			备份测试：软件运行一旦出现问题，有备用系统可以正常使用			
			
			健壮性测试：对于规范以外的输入能够判断出这个输入不符合规范要求、并能有合理的处理方式
			
			文档测试：测试软件研发过程中输出的一些文档
			
			在线帮助测试：找售后客服进行协助
			
			网络测试：主要面向交换机、路由器、防火墙这些网络设备
			
			稳定性测试：逐步给服务器施加压力，让系统持续运行一段时间(3-7天)，检查系统是否能够稳定运行
			
	验收测试：
		·确定产品是否能够满足合同或者用户所规定需求的测试
		·检查软件的功能及性能与用户需求的符合度，文档资料的完成性和正确性
		
		分类
			正式验收：有正规的测试过程，需要制定验收测试计划、测试方案、选择测试用例、执行测试、提交测试结果
			
			非正式验收：
				α(阿尔法)测试：软件开发公司组织内部人员模拟各类用户行为对即将上市的产品进行测试
				
				β(贝塔)测试：软件开发公司组织各方面的典型客户在日常工作中实际使用，并要求用户
							  报告异常情况、提出改进意见、然后公司再进行完善
							  
				区别：
					负责人：α测试公司内部，β测试典型用户
					测试环境：α测试在开发环境，β测试在生产环境
					测试是否可控：α测试环境和测试过程是可控，β测试不可控
					问题记录人：α测试通常是测试人员，β测试问题由用户记录
							  
	软件测试按照是否运行程序划分：
	
		动态测试：实际运行被测试的软件，输入相应的测试数据，检查实际输出结果是否和预期结果相一致的过程
		
		静态测试：不运行被测试的软件，而只是静态的检查代码、界面或者文档
		
	软件测试按照是否查看代码划分：
		黑盒测试：又称功能测试，数据驱动测试或者是基于需求规格说明书的测试，只关注软件的功能及性能与需求规格
				  的符合度，不关心程序代码内部的逻辑结构和特性
				  
				应用的阶段：确认测试、系统测试、验收测试
				
				常用方法：等价类、边界值、错误推测法、场景法
				
		白盒测试：又称为结构测试、基于程序代码的测试，只关注程序代码内部的结构，不关注软件外部的整体功能及性能指标
				
				应用的阶段：单元测试
				
				测试用例的设计方法：语句覆盖、条件覆盖、代码审查
				
		灰盒测试：介于白盒和黑盒测试之间的测试，既要关注软件的整体功能，又要关注程序代码内部的实现，关注程度没有白盒深入
				
				应用阶段：集成测试
				
	其他划分：
		回归测试、冒烟测试、随机测试、交叉测试、app测试、web测试……
		
==============================第二天==============================
需求分析
	1.主要是解决测试什么的问题，明确测试的地方
	
	2.以需求规格说明书为基础、进行细化和分解
	
	3.测试的范围：
		功能：主要指的是明确的和隐含的需求
		非功能：主要指的是性能、可靠性、安全性……
		
	4.需求分析谁来做
		有经验的软件测试工程师
		
	5.需求分析的时间
		通常占项目周期的10%-20%左右的时间
		
	6.输出的文档
		测试需求分析文档(通常使用word编写)
		或者需求跟踪矩阵(通常使用excel编写)
		或者测试要点(使用mindmanager编写，又称思维导图工具)
		
	7.评审人
		测试经理、组内测试人员、开发人员、产品经理、项目经理
		
	8.需求分析的特征
		·需求项必须是可核实的
		·需求分析需要指明正确的条件和错误的条件
		·需求分析不包含具体的数据
		
	9.需求分析的工具
		mindmanager、Xmind、word、excel……
		
	10.需求分析方法：
		·测试要点分析
		·功能交互分析
		·质量特性分析
		·测试类型分析
		
		需求分析的过程：需求采集=====>需求分析=====>需求评审
		
			依据：	需求规格说明书		需求分析方法		测试需求 
					     ||					||			   ||
					     ||					||			   ||						 
					     ||					||			   ||
					  需求采集			  需求分析		需求评审
					     ||					||			   ||
					     ||					||			   ||						 
					     ||					||			   ||
			输出：	原始测试需求表		  测试要点		评审结论
			
			
测试计划
	1.编写人：测试经理或者测试组长
	
	2.编写依据：需求分析的结果、项目计划
	
	3.读者对象：
		上：领导
		中：项目经理、产品经理、QA
		下：组内的软件测试工程师，组外：其他项目组的测试经理
		
	4.如何制定测试计划
		·认真做好测试资料的搜集工作，主要搜集人和设备
		·明确测试的目标，主要指时间目标、质量目标
		·坚持5W原则，明确内容和过程
			why：测试的目的
			what：测试的范围
			when：测试的时间
			who：测试的参与人
			where：项目中输出的文档、缺陷报告单存放的位置
			
	5.采用评审和更新的机制，保证测试计划满足实际需求
	
	6.编写时间
		·测试需求分析完成后，时间大概为1-5天(工作日)，在整个测试过程处于不断修改的状态
		
	7.测试计划的内容
		·概述
		·目的和范围
		·启动条件
			1).测试用例编写完成，并通过评审
			2).开发编码完成，并通过自测
			3).冒烟测试通过
			4).开发提交了转测试申请单及相关的配置文档
		·结束条件
			1).测试任务全部完成，人力投入充分
			2).需求覆盖率达到100%，测试用例通过率达到100%
			3).缺陷密度达到预定标准
				预定标准：高验收标准为：3-5个
						  一般验收标准：6-10个
				缺陷密度=Bug总数/代码量      代码量单位为：Kloc(千行)
			4).缺陷修复率达到100%，遗留的bug需要给出规避措施
			5).bug的趋势呈收敛状态
			6).需求规格中的所有功能已全部正确实现
			7).交付件齐全，验收测试通过
		·测试环境
			1).软件环境
			2).硬件环境
		·进度计划
			1).时间周期和人力的安排
			2).任务的分配及进度安排
		·项目的风险
		·测试的类型
			主要指：功能测试、性能测试、兼容性测试、安全性测试、冒烟测试、回归测试、集成测试……
		
===============================第三天=================================
测试方案

	1.概念：测试方案是对需求分析的结果进行细化和分解得到的功能点
	
	2.时间：测试计划编写完成后
			时间周期：大型项目：二周左右(工作日)
					 中小型项目：一周左右(工作日)
					 
	3.编写人：具有丰富经验的软件测试工程师
	
	4.评审人：测试经理、组内的测试工程师、开发代表、项目经理、QA
	
	5.计划和方案的区别：
		定义不同：
			计划是对整个测试过程中所有的工作内容进行规划和描述
			方案是对整个被测试软件的特性、测试策略、测试方法等方面进行规划和描述
			
		层次不同：
			计划是管理层面、从组织管理的角度规划测试活动、主要解决“做什么”的问题
			方案是从技术角度规划测试活动，主要解决“怎样做”的问题
			
		参考依据不同：
			计划参照项目计划、测试需求分析的结果进行编写
			方案参照测试计划、测试需求分析的结果进行编写
			
	水杯的测试点：
		·杯子受热后，会膨胀，受冷后，会收缩
		·杯子的使用寿命
		·杯子装水的多少
		·杯子装水后是否会漏水
		·杯子是否保温
		·杯子的外观是否完整
		·杯子的材质使用过程中是否安全
		·杯子是否隔热
		·杯子是否有异味
		·杯子在不同的气压下是否能够正常使用
		·杯子的打开方式
		·杯子长时间使用，杯身是否会掉色
		·杯盖损坏后，是否能够找到替换品
		·杯子是否耐高温
		·杯子的耐腐蚀性
		·杯子的保温时长
		·杯子的密封性
		·杯子是否抗摔
		·杯身是否有防滑措施
		·杯子是否方便携带
		·杯身是否有LOGO
		·杯子是否有把手
		·杯子是否有售后方式
		·杯子是否有使用说明书
		·杯子是否有过滤网
		·杯子的适用人群
		·杯子是否容易清洗
		·杯身的颜色
		·水杯的杯口的口径
		·杯子的杯盖和杯身是否是一体
		·杯子长时间盛装水，杯子内壁是否会产生水垢
		·杯子受热不均匀，是否会破碎
		
	支付功能怎样测试？
		·是否支持银联的支付
		·是否支持支付宝的支付
		·支付的账号是否有额度的上限
		·是否支持扫描二维码支付
		·支付超出额度是否有提示
		·是否有小额免密支付
		·支付的金额不存在小于等于0
		·支付成功是否有短信提示
		·支付的密码是否安全
		·是否支持ApplePay支付
		·没有网络是否能够支付
		·支付时是否需要安装安全控件
		·连续多次输入错误的支付密码，是否会锁定账号
		·是否支持微信支付
		·支付完成后，订单是否会生成
		·跨区域支付是否会收取手续费
		·是否支持朋友代付
		·支付的账号金额不足，是否可以更换支付方式
		·店家的优惠券在支付时是否能够使用
		·是否支持刷脸支付
		·支付成功后是否支持退货退款
		·支付的时效性：及时到账，延时到账
		·是否支持跨币种支付
		·支付超时后，订单是否会自动关闭
		·一个订单只允许支付一次
		·订单不能够被截取篡改金额
		·亲密支付
		
测试用例 
	
	1.概念：它是一份测试设计文档，描述了输出动作和一个期望结果，目的是确定程序的某个特性是正常的工作
	
	2.参考依据：需求规格说明书、需求分析的结果、测试方案
	
	3.编写人：具有丰富经验的软件测试工程师
	
	4.编写时间：测试方案评审完成且通过评审，编写时间占整个项目周期的30%左右的时间
	
	5.输出文档：测试用例
	
	6.编写工具：Excel、word、bugfree、zentao、testlink、QC(quality center)
	
	7.评审人：测试经理、组内的测试工程师、开发代表、项目经理、QA
	
	8.用例的组成：
		用例编号、功能模块、标题、优先级、预置条件、操作步骤、预期结果、设计人、设计时间、备注
		
		用例编号：
			·不能重复、格式为：项目名-模块名-编号	如：UG-login-0001
			
		功能模块：
			·主要是方便分配任务、知道用例的所属路径、一般编写二级模块、也写三级模块	如：待处理订单-新增订单
			
		用例标题：
			·标题不能重复
			·标题中不涉及具体的测试数据
			·标题中没有句号，最多一个逗号
			·标题中不能写bug
			·标题长度通常不超过24个字符
			·标题中不能有歧义
			·标题和预期结果相呼应
			·格式：在什么地方+条件+结果
			
		优先级：
			·目的是为了在测试时间不充足的情况下，按照优先级的比例抽取主要功能模块，如:冒烟测试、回归测试 
			·根据重要性和使用频率来确定用例的优先级，两高得高，一高一低为中，两低为低
			·优先级高中低的比例为1:3:1
			·正常场景的用例比异常场景的用例高一个等级
			
		预置条件：
			·在具体的测试步骤之前需要准备的前提条件，如：登陆某个网站，需要提前注册号账号
			·它包含具体的测试数据
			·测试时需要的环境信息
			
		操作步骤：
			·在具体的功能界面中输入数据和操作的按钮
			·操作步骤涉及具体的测试数据
			
		预期结果：
			·测试用例的期望结果、用例指明测试执行后要达到什么样的结果
			
=====================================第四天===========================================
黑盒测试用例的设计方法
	
	1.概念：黑盒测试又称为功能测试、数据驱动测试或者是基于需求规格说明书的测试，是从用户的观点出发的测试
	
	2.黑盒测试的实施过程：
		·测试计划阶段：需求分析、测试计划
		·测试设计阶段：测试方案、测试用例
		·测试执行阶段：测试执行
		·测试总结阶段：测试报告
		
	3.测试用例设计要点：
		·用最少的测试用例尽可能全面地覆盖所有的需求
		·穷举测试数据太大、完全测试是不可能的、测试需要终止
		  所以需要使用科学的测试用例设计方法、选择具有代表性的数据进行测试
		  
	4.黑盒测试常用设计方法：
		·等价类、边界值、错误推测法、场景法    （重点掌握）
		·因果图、判定表、正交设计实验法
		
	5.等价类：
		·定义：把所有可能的输入数据划分成若干部分，然后从每个子集中选取少数具有代表性的数据作为测试用例
			
		·有效等价类：指对程序的规格说明来说是合理的，这些数据构成的集合称为有效等价类
		
		·无效等价类：指对程序的规格说明是不合理或无意义的输入数据所构成的集合称为无效等价类
		
		·标准：
			完备测试：将集合划分为互不相交的一组子集，而子集的并集是整个集合
			避免冗余：子集互不相交
		
		·设计方法：
			1).在输入条件规定了取值范围或值的个数的情况下，则可以建立一个有效等价类和两个无效等价类
			2).在输入条件规定了值的集合或者规定了必须如何的条件，可以确定一个有效等价类和一个无效等价类
			3).在输入条件是一个布尔量的情况下，可以确定一个有效等价类和一个无效等价类
			4).在规定了输入数据的一组值，并且程序要对每一个输入值分别处理的情况下，可确定n个有效等价类和一个无效等价类
			5).在规定了输入数据必须遵守的规则的情况下，可确立一个有效等价类和若干个无效等价了(从不同角度违反规则)
			6).在确知了已划分的等价类中各元素在程序处理中的方式不同的情况下，则应该将该等价类进一步划分为更小的等价类
			
		·等价类测试用例设计原则：
			1).为每一个等价类规定一个唯一的编号
			2).设计一个新的用例，使其尽可能多的覆盖尚未被覆盖的有效等价类，重复这一步骤，直到所有的有效等价类都被覆盖为止
			3).设计一个新的用例，使其仅覆盖一个尚未被覆盖的无效等价类，重复这一步骤，直到所有的无效等价类都被覆盖为止
			
	6.边界值 
		是对等价类划分方法的补充
			·上点有效，离点无效
			·上点无效，离点有效
			
			上点：即取值范围的端点
			离点：即取值范围端点附近的值

	7.错误推测法：
		基于经验和直觉推测程序中所有可能存在的各种错误，从而针对性的设计测试用例
		
		如：
			·对于日历控件需要考虑闰年的2月29号
			·多条相同的数据，怎样排序
			·密码中加入空格
			·密码不支持拷贝，但是可以在密码输入框中粘贴内容
			·两个用户同时删除同一条数据
			·不勾选数据，删除数据，应用提示消息
			·查找的时候输入通配符
			·新增时考虑数据是否唯一
			·app软件使用过程中来电话、软件是否能够继续使用
			·退出用户登录界面，使用Backspace键，是否能够返回到登陆界面
			
	8.场景法：
		
		概念：又称流程分析法，是将软件系统的某个流程看成路径，用路径分析的方法来设计测试用例，根据
			  流程的顺序依次进行组合，使得流程的各个分支都能覆盖
			  
		设计测试用例的步骤：
			·分析需求，根据需求规格说明书描述出程序的基本流及各项备选流
			·根据基本流和各项备选流生成不同的场景
			·对每一个场景生成相应的测试用例
			
		举例：
			电商网购平台：
				基本流：
					打开网购平台----->登陆账号----->挑选商品----->加入购物车----->提交订单
					----->支付订单----->生成订单----->卖家发货----->买家确认收货----->评价商品
					----->售后流程
					
				备选流：
					·未注册该平台账号
					·用户名密码错误
					·没有选购商品
					·支付密码错误
					·支付账号余额不足
					·用户选购商品时退出了系统
					
	9.测试方法选择的策略
		·首先进行等价类划分，将无限的测试变成有限
		·在任何情况下都必须使用边界值分析方法
		·然后使用错误推测法追加一些异常场景用例
		·对于业务流程清晰的系统，可以采用场景法贯穿整个测试过程


























		





